from telegram.ext import Application
from telegram.ext import MessageHandler
from telegram.ext import filters
from telegram.ext import CallbackQueryHandler
from telegram.ext import CommandHandler
from telegram import InlineKeyboardMarkup
from telegram import InlineKeyboardButton
from telegram import ReplyKeyboardMarkup
from telegram import ReplyKeyboardRemove
import random
import logging

TOWNS = ['Moscow', 'Saint Peterburg', 'Kazan']
PHOTOS = {'Moscow': ['Moscow_1.jpg'], 'Saint Peterburg': ['Saint_peterburg_1.jpg'], 'Kazan': ['Kazan_1.jpg']}
NAME_TOWNS = {'Moscow': ["–ú–æ—Å–∫–≤–∞", '–º–æ—Å–∫–≤–∞'],
              'Saint Peterburg': ['–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', "—Å–ø–±", "–°–ø–±", "–°–ü–ë", "–ø–∏—Ç–µ—Ä", "–ü–∏—Ç–µ—Ä", "—Å–∞–Ω–∫—Ç –ø–µ—Ç–µ—Ä–±—É—Ä–≥",
                                  "–°–∞–Ω–∫—Ç –ø–µ—Ç–µ—Ä–±—É—Ä–≥", "–°–∞–Ω–∫—Ç –ü–µ—Ç–µ—Ä–±—É—Ä–≥", "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥", "–°–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥"],
              'Kazan': ["–ö–∞–∑–∞–Ω—å", "–∫–∞–∑–∞–Ω—å"]}

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)

logger = logging.getLogger(__name__)

reply_keyboard = [['üéÆ –∏–≥—Ä–∞—Ç—å üéÆ', '‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è'], ['üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä', 'üìñ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìñ']]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)


async def start(update, context):
    await update.message.reply_text(
        "–Ø –±–æ—Ç-–∏–≥—Ä–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã!",
        reply_markup=markup
    )
    return context


async def close_keyboard(update, context):
    await update.message.reply_text(
        "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞. –ò—Å–ø–æ—å–∑—É–π—Ç–µ /start –¥–ª—è –µ—ë –∑–∞–ø—É—Å–∫–∞!",
        reply_markup=ReplyKeyboardRemove())
    return context


async def info(update, context):
    await update.message.reply_text("–Ø –±–æ—Ç, –∫–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    return context


async def stat(update, context):
    await update.message.reply_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    return context


async def play(update, context):
    town = random.choice(TOWNS)
    photo = random.choice(PHOTOS[town])
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –£–≥–∞–¥–∞–π—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ —Ñ–æ—Ç–æ:")
    await update.message.reply_photo(rf'Russia cities\{town}\{photo}')
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    context.user_data['locality'] = [NAME_TOWNS[town]]
    context.user_data['isgame'] = 'wait town'


async def first_response(update, context):
    context.user_data['locality'] = context.user_data['locality'] + [update.message.text]
    s = context.user_data['locality']
    await update.message.reply_text(f'–í—ã —É–≥–∞–¥–∞–ª–∏ –≥–æ—Ä–æ–¥ - {s[0][0]}\n–æ—Ü–µ–Ω–∏—Ç–µ –∏–≥—Ä—É –æ—Ç 1 –¥–æ 5' if s[1] in s[
        0] else f'–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ –≥–æ—Ä–æ–¥ {s[0][0]}, –≤—ã–±—Ä–∞–≤ - {s[1]}\n–æ—Ü–µ–Ω–∏—Ç–µ –∏–≥—Ä—É –æ—Ç 1 –¥–æ 5')
    context.user_data['isgame'] = 'wait number'


async def second_response(update, context):
    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    del context.user_data['isgame']
    del context.user_data['locality']


async def check_command(update, context):
    if 'isgame' in context.user_data:
        if context.user_data['isgame'] == 'wait town':
            await first_response(update, context)
        elif context.user_data['isgame'] == 'wait number':
            await second_response(update, context)
    elif update.message.text == 'üéÆ –∏–≥—Ä–∞—Ç—å üéÆ':
        await play(update, context)
    elif update.message.text == 'üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä':
        await stat(update, context)
    elif update.message.text == 'üìñ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìñ':
        await info(update, context)
    elif update.message.text == 'üö™ –≤—ã—Ö–æ–¥ üö™':
        await close_keyboard(update, context)
    elif update.message.text == '‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è':
        await settings(update, context)


async def button(update, context):
    query = update.callback_query
    await query.answer()
    answer = str(query.data)

    if answer == "—Å–ª–æ–∂–Ω–æ—Å—Ç—å":
        await second_settings(update, context, "—Å–ª–æ–∂–Ω–æ—Å—Ç—å")
    elif answer == "–ø—Ä–æ—Ñ–∏–ª—å":
        await query.edit_message_text(text="–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif answer == "–∑–∞–∫—Ä—ã—Ç—å":
        await query.edit_message_text(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã")
    elif answer in ["–ª—ë–≥–∫–∞—è", "—Å—Ä–µ–¥–Ω—è—è", "—Å–ª–æ–∂–Ω–∞—è", "—Å–º–µ—à–∞–Ω–Ω–∞—è"]:
        await query.edit_message_text(text=f"–í–∞—à–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {answer}")
    elif answer == '–Ω–∞–∑–∞–¥':
        await second_settings(update, context, '–Ω–∞–∑–∞–¥')
    return context


async def settings(update, context):
    keyboard = [
        [
            InlineKeyboardButton("—Å–ª–æ–∂–Ω–æ—Å—Ç—å", callback_data='—Å–ª–æ–∂–Ω–æ—Å—Ç—å'),
            InlineKeyboardButton("–ø—Ä–æ—Ñ–∏–ª—å", callback_data='–ø—Ä–æ—Ñ–∏–ª—å'),
            InlineKeyboardButton("–∑–∞–∫—Ä—ã—Ç—å", callback_data='–∑–∞–∫—Ä—ã—Ç—å')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‚öôÔ∏è               –ù–∞—Å—Ç—Ä–æ–π–∫–∏               ‚öôÔ∏è", reply_markup=reply_markup)
    return context


async def second_settings(update, context, count):
    query = update.callback_query
    if count == "—Å–ª–æ–∂–Ω–æ—Å—Ç—å":
        keyboard = [
            [
                InlineKeyboardButton("–ª–µ–≥–∫–∞—è", callback_data='–ª—ë–≥–∫–∞—è'),
                InlineKeyboardButton("—Å—Ä–µ–¥–Ω—è—è", callback_data='—Å—Ä–µ–¥–Ω—è—è'),
                InlineKeyboardButton("—Å–ª–æ–∂–Ω–∞—è", callback_data='—Å–ª–æ–∂–Ω–∞—è')],
            [
                InlineKeyboardButton("—Å–º–µ—à–∞–Ω–Ω–∞—è", callback_data='—Å–º–µ—à–∞–Ω–Ω–∞—è'),
                InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='–Ω–∞–∑–∞–¥'),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å ‚öôÔ∏è", reply_markup=reply_markup)
    elif count == "–Ω–∞–∑–∞–¥":
        keyboard = [
            [
                InlineKeyboardButton("—Å–ª–æ–∂–Ω–æ—Å—Ç—å", callback_data='—Å–ª–æ–∂–Ω–æ—Å—Ç—å'),
                InlineKeyboardButton("–ø—Ä–æ—Ñ–∏–ª—å", callback_data='–ø—Ä–æ—Ñ–∏–ª—å'),
                InlineKeyboardButton("–∑–∞–∫—Ä—ã—Ç—å", callback_data='–∑–∞–∫—Ä—ã—Ç—å')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è               –ù–∞—Å—Ç—Ä–æ–π–∫–∏               ‚öôÔ∏è", reply_markup=reply_markup)
    return context


def main():
    application = Application.builder().token('7198751024:AAF8hG5IUJq-BNMJ6BQ0FtH6kQgUDdT7C7I').build()

    application.add_handler(CommandHandler("start", start))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_command))

    application.add_handler(CallbackQueryHandler(button))

    application.run_polling()


if __name__ == '__main__':
    main()
