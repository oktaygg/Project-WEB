# Импортируем необходимые классы.
import logging
from telegram.ext import Application
from telegram.ext import CommandHandler
from telegram import ReplyKeyboardMarkup
from telegram import ReplyKeyboardRemove

# Запускаем логгирование
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)

reply_keyboard = [['/play', '/stat'],
                  ['/help', '/close']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)


# Определяем функцию-обработчик сообщений.
# У неё два параметра, updater, принявший сообщение и контекст - дополнительная информация о сообщении.

# Напишем соответствующие функции.
# Их сигнатура и поведение аналогичны обработчикам текст
async def start(update, context):
    await update.message.reply_text(
        "Я бот-игра! Используйте команды для старта игры!",
        reply_markup=markup
    )


async def close_keyboard(update, context):
    await update.message.reply_text(
        "Клавиатура закрыта. Испоьзуйте /start для её запуска!",
        reply_markup=ReplyKeyboardRemove()
    )


async def help(update, context):
    await update.message.reply_text(
        "Я бот, команда в разработке.")


async def play(update, context):
    await update.message.reply_text(
        "В разработке.")


async def stat(update, context):
    await update.message.reply_text("В разработке.")


def main():
    application = Application.builder().token('7198751024:AAF8hG5IUJq-BNMJ6BQ0FtH6kQgUDdT7C7I').build()
    application.add_handler(CommandHandler("play", play))
    application.add_handler(CommandHandler("stat", stat))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("close", close_keyboard))
    application.run_polling()


# Запускаем функцию main() в случае запуска скрипта.
if __name__ == '__main__':
    main()
